Dequeue

#include <iostream>
#include<stdlib.h>

using namespace std;

struct node
{
    int data;
    struct node* next;
    struct node* prev;

};

struct node* fronts=NULL;
struct node* rear=NULL;

bool isEmpty()
{
    if(fronts==NULL && rear==NULL)
    {
        return true;

    }
    return false;
}

void insert_rear(int new_data)
{
    struct node* new_node=(struct node *)malloc(sizeof(struct node));

    new_node->data=new_data;
    new_node->prev=NULL;
    new_node->next=NULL;

    if(isEmpty()) {
        fronts=new_node;
        rear=new_node;
    }

    else {
        rear->next=new_node;
        new_node->prev=rear;
        rear=new_node;
    }
}

void insert_front(int new_data)
{
    struct node* new_node=(struct node *)malloc(sizeof(struct node));

    new_node->data=new_data;
    new_node->next=NULL;
    new_node->prev=NULL;

    if(isEmpty()) {
        fronts=new_node;
        rear=new_node;
    }

    else {
        new_node->next=fronts;
        fronts->prev=new_node;
        fronts=new_node;
    }
}

void delete_front()
{
    if(isEmpty())
    {
        cout<<"the queue is empty";
        return;
    }

    struct node* temp=fronts;

    fronts=temp->next;

    if(fronts==NULL) {
        rear=NULL;
    }
    else {
        fronts->prev=NULL;
    }

    delete(temp);
}


void delete_rear()
{
    if(isEmpty()) {
        cout<<"the queue is empty";
        return;
    }

    struct node* temp=rear;
    rear=temp->prev;
    if(rear==NULL) {
        fronts=NULL;
    }
    else {
        rear->next=NULL;
    }

    delete(temp);
}


int getfront()
{
    return fronts->data;

}

int getrear()
{
    return rear->data;

}


void printqueue(struct node* fronts,struct node* rear)
{
    while(fronts!=rear)
    {
        cout<<fronts->data<<endl;

        fronts=fronts->next;

    }

    cout<<rear->data<<endl;
}

int main()
{

    cout<<"the original queue is:-"<<endl;

    insert_rear(1);

    insert_front(2);

    insert_rear(3);

    printqueue(fronts,rear);

    cout<<"the queue after insertion is:-"<<endl;

    insert_front(4);

    printqueue(fronts,rear);
    cout<<"the queue after insertion is:-"<<endl;

    insert_rear(5);

    printqueue(fronts,rear);
    cout<<"the queue after insertion is:-"<<endl;

    insert_front(6);

   printqueue(fronts,rear);

   cout<<"deleting from rear"<<endl;

   delete_rear();

   printqueue(fronts,rear);

   cout<<"deleting from front"<<endl;

   delete_front();

   printqueue(fronts,rear);

   cout<<"getting front element"<<endl;

   cout<<getfront()<<endl;

   cout<<"getting rear element"<<endl;

    cout<<getrear()<<endl;

    return 0;
}




Circular Queue

// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;
#define size 5

int front=-1,rear=-1,queue[size], elem;

void enqueue() {
    if(front==(rear+1)%size)
    cout<<"\nOverflow";
    else if(rear==-1&&front==-1) {
        cout<<"\nEnter the element into Circular Queue: ";  cin>>elem;
        front=0;
        rear++;
        queue[rear]=elem;
    }
    else {
        cout<<"\nEnter the element into Circular Queue: ";  cin>>elem;
        rear=(rear+1)%size;
        queue[rear]=elem;
    }
}

void dequeue()  {
    if(front==-1&&rear==-1)
    //if(front==(rear+1)%size)
    cout<<"\nCircular Queue is Empty";
    else if(front==rear) {     //Onle one Element left in Queue
    cout<<"\nDeleted element is "<<queue[front];
    front=rear=-1;
    }
    else {
        cout<<"\nDeleted element is "<<queue[front];
        front=(front+1)%size;
        //front++;
    }
}

void peek() {
    if(front==-1&&rear==-1)
    cout<<"\nQueue is empty";
    else
    cout<<endl<<queue[front];
}

void display() {
    if(front==-1&&rear==-1)
    cout<<"\nQueue is empty";
    else {
        int i;
        cout<<"\nElements of Circular Queue: ";
        for(i=front;i<size;i++)
        cout<<"\t"<<queue[i];
        for(i=0;i<=rear;i++)
        cout<<"\t"<<queue[i];
        
        
        // int i=front;
        
        // while(i!=rear) {
        //     cout<<"\t"<<queue[i];
        //     i=(i+1)%size;
        // }
        // cout<<"\t"<<queue[rear];
        
        
        // do {
        //     cout<<"\t"<<queue[i];
        //     i=(i+1)%size;
        // }while(i!=rear);
    }
}

int main() {
    int ch;
    while(1) {
        cout<<"\nOperations for Circular Queue";
        cout<<"\n1.Insert\n2.Delete\n3.Peek Value\n4.Display\n5.Exit";
        cout<<"\nEnter choice: ";
        cin>>ch;
        switch(ch) {
            case 1:enqueue(); break;
            case 2:dequeue(); break;
            case 3:peek(); break;
            case 4:display(); break;
            case 5:exit(1);
            default:cout<<"\nWrong Choice";
        }
    }
    return 0;
}


Linear Queue

#include <iostream>
using namespace std;
#define size 5

int front=-1,rear=-1,queue[size], elem;

void enqueue() {
    if(rear==size-1)
    cout<<"\nOverflow";
    // else {
    //     if(front==-1)
    //     front=0;
    //     cout<<"Enter the Number: ";
    //     cin>>elem;
    //     rear++;
    //     queue[rear]=elem;
    // }
    else if(front==-1&&rear==-1) {
        front=0;
        cout<<"Enter the Number: ";
        cin>>elem;
        rear++;
        queue[rear]=elem;
    }
    else {
        cout<<"Enter the Number: ";
        cin>>elem;
        rear++;
        queue[rear]=elem;
    }
}

void dequeue()  {
    // if(front==-1||front>rear)
    // cout<<"\nQueue is Empty";
    // else {
    //     cout<<"\nDeleted element is "<<queue[front];
    //     front++;
    // }
    if(front==-1&&rear==-1)
    cout<<"\nQueue is Empty";
    else if(front==rear) {
        cout<<"\nDeleted element is "<<queue[front];
        front=rear=-1;
    }
    else {
        cout<<"\nDeleted element is "<<queue[front];
         front++;
    }
}

void peek() {
    //if(front==-1||front>rear)
    if(front==-1&&rear==-1)
    cout<<"\nQueue is empty";
    else
    cout<<"\nPeak Value of Queue is "<<queue[front];
}

void display() {
    int i;
    // if(front==-1||front>rear)
    if(front==-1&&rear==-1)
    cout<<"\nQueue is empty";
    else {
        for(i=front;i<=rear;i++)
        cout<<endl<<queue[i];
    }
}

int main() {
    int ch;
    while(1) {
        cout<<"\n1.Insert\n2.Delete\n3.Peek Value\n4.Display\n5.Exit";
        cout<<"\nEnter choice: ";
        cin>>ch;
        switch(ch) {
            case 1:enqueue(); break;
            case 2:dequeue(); break;
            case 3:peek(); break;
            case 4:display(); break;
            case 5:exit(1);
            default:cout<<"\nWrong Choice";
        }
    }
    return 0;
}

Circular and Non-Circular Linked List
#include <iostream>
using namespace std;

struct Node {
   int info;
   struct Node *link;
};
typedef struct Node node;
node *start=NULL;

// Simple Linked List

// void insert_beg() {
// int elem;
// node *newptr;
// cout<<"Enter the element to be insert: ";
// cin>>elem;
// newptr=(node *)malloc(sizeof(node));
//     newptr->info=elem;
//     newptr->link=start;
//     start=newptr;
// }

// void insert_end() {
// int elem;
// node *newptr,*curptr;
// if(start==NULL)
//     insert_beg();
// else {
// cout<<"Enter the element to be insert: ";
// cin>>elem;
// newptr=(node *)malloc(sizeof(node));
// newptr->info=elem;
// start=curptr;
// while(curptr->link!=NULL)
//     curptr=curptr->link;
// curptr->link=newptr;
// newptr->link=NULL;
// }
// }


// void insert_pos() {
// int pos,i,elem;
// node *newptr,*curptr;
// cout<<"Enter the position you want to insert: ";
// cin>>pos;
// if(start==NULL||pos==1)
//     insert_beg();
// else {
//     cout<<"Enter the element to be insert: ";
//     cin>>elem;
//     newptr=(node *)malloc(sizeof(node));
//     newptr->info=elem;
//     curptr=start;
//     for(i=1;i<pos-1;i++)
//         curptr=curptr->link;
//     newptr->link=curptr->link;
//     curptr->link=newptr;
// }
// }


// void delete_beg() {
// node *curptr;
// if(start==NULL)
//     cout<<"LL is Empty";
// else {
//     curptr=start;
//     cout<<"Deleted element is "<<curptr->info;
//     start=curptr->link;
//     free(curptr);
// }
// }


// void delete_end()  {
// node *curptr,*preptr;
// if(start==NULL)
// cout<<"LL is Empty";
// else if(start->link==NULL)  {
//     cout<<"Deleted element is "<<start->info;
//     start=NULL;
// }
// else {
//     curptr=start;
//     preptr=NULL;
//     while(curptr->link!=NULL)  {
//         preptr=curptr;
//         curptr=curptr->link;
//     }
//     cout<<"Deleted Element is "<<curptr->info;
//     preptr->link=NULL;
//     free(curptr);
// }
// }


// void delete_pos() {
// int i,pos;
// node *curptr,*preptr;
// cout<<"Enter the position from you want to delete: ";
// cin>>pos;
// if(pos==1||start==NULL)
//     delete_beg();
// else  {
//     curptr=start;
//     for(i=1;i<pos;i++)  {
//         preptr=curptr;
//         curptr=curptr->link;
//     }
//     cout<<"Deleted Element is "<<curptr->info;
//     preptr->link=curptr->link;
//     free(curptr);
// }
// }

// void count() {
// int n=0;
// node *curptr;
// if(start==NULL)
//     cout<<"LL is Empty";
// else  {
//     curptr=start;
//     while(curptr!=NULL) {
//        n++;
//        curptr=curptr->link;
//     }
//     cout<<"Number of Nodes: "<<n;
// }
// }

// void display() {
// node *curptr;
// if(start==NULL)
//     cout<<"LL is Empty";
// else  {
//     curptr=start;
//     while(curptr!=NULL) {
//         cout<<curptr->info<<"\t";
//         curptr=curptr->link;
//     }
// }
// }


//Circular Linked List

void insert_beg() {
    node *newptr, *curptr=start;
    newptr=(node *)malloc(sizeof(node));
    cout<<"Enter the number: ";
    cin>>newptr->info;
    if(start==NULL) {
    newptr->link=newptr;
    start=newptr;
    }
    else {
    while(curptr->link!=start)
    curptr=curptr->link;
    curptr->link=newptr;
    newptr->link=start;
    start=newptr;
    }
}




void insert_end() {
    node *newptr,*curptr=start;
    if(start==NULL)
    insert_beg();
    else {
        newptr=(node *)malloc(sizeof(node));
        cout<<"Enter the number: ";
        cin>>newptr->info;
        while(curptr->link!=start) {
        curptr=curptr->link;
    }
    curptr->link=newptr;
    newptr->link=start;
    }
}

void delete_beg() {
    node *curptr=start, *toDelete=start;;
    while(curptr->link!=start)
    curptr=curptr->link;
    cout<<"Deleted element is "<<start->info;
    curptr->link=start->link;
    start=start->link;

    delete toDelete;
}

void delete_pos() {
    int pos,i;
    node *curptr=start, *toDelete;
    cout<<"Enter the position: ";
    cin>>pos;
    if(pos==1)
    delete_beg();
    else {
        for(i=1;i<pos-1;i++)
        curptr=curptr->link;
        toDelete=curptr->link;
        cout<<"Deleted element is "<<toDelete->info;
        curptr->link=curptr->link->link;
        delete toDelete;

    }
}

void display() {
    node *curptr=start;
    if(start==NULL)
    cout<<"LL is Empty";
else  {
    curptr=start;
    do 
    {
        cout<<curptr->info<<"\t";
        curptr=curptr->link;

      } while(curptr!=start);
}
}



int main()
{
    int ch;
    while(1)  {
    cout<<"\n1.Insert at Beginning\n2.Insert at End\n3.Insert at given Position";
    cout<<"\n4.Delete from Begin\n5.Delete from End\n6.Delete from give Position";
    cout<<"\n7.Count the Number of Nodes\n8.Display the Elements of LL";
    cout<<"\n9.Exit\nEnter your Choice :";
    cin>>ch;
    switch(ch) {
    case 1:insert_beg(); break;
    case 2:insert_end(); break;
    //case 3:insert_pos(); break;
    case 4:delete_beg(); break;
   // case 5:delete(); break;
    case 6:delete_pos(); break;
    // case 7:count(); break;
    case 8:display(); break;
    case 9:exit(1);
    default:cout<<"\nWrong Choice";
    }
    }
    return 0;
}

