#include <bits/stdc++.h>

using namespace std;

class SinglyLinkedListNode {
    public:
        int data;
        SinglyLinkedListNode *next;

        SinglyLinkedListNode(int node_data) {
            this->data = node_data;
            this->next = nullptr;
        }
};

class SinglyLinkedList {
    public:
        SinglyLinkedListNode *head;
        SinglyLinkedListNode *tail;

        SinglyLinkedList() {
            this->head = nullptr;
            this->tail = nullptr;
        }

        void insert_node(int node_data) {
            SinglyLinkedListNode* node = new SinglyLinkedListNode(node_data);

            if (!this->head) {
                this->head = node;
            } else {
                this->tail->next = node;
            }

            this->tail = node;
        }
};


void free_singly_linked_list(SinglyLinkedListNode* node) {
    while (node) {
        SinglyLinkedListNode* temp = node;
        node = node->next;

        free(temp);
    }
}
using namespace std;

struct node {
    int info;
    struct node *link;
};

 struct node *head=NULL;
 
 void insert_node(int x) {
     struct node *newptr=(struct node *)malloc(sizeof(struct node));
     newptr->info=x;
     newptr->link=NULL;
     if(head==NULL) {
         
         head=newptr;
     }
     else {
         struct node *curptr=head;
         while(curptr->link!=NULL) {
         curptr=curptr->link;
         }
         curptr->link=newptr;
     }
 }
 
//  void display() {
     
//  }
 
 
// Complete the printLinkedList function below.


 


 
 void printLinkedList(SinglyLinkedListNode* llist) {
     while(llist!=NULL) {
         cout<<llist->data<<endl;
         llist=llist->next;
     }
}

// int main(){
//     int n,elem;
//     cin>>n;
//     for(int i=0;i<n;i++) {
//         cin>>elem;
//         create(elem);
//     }
//     display();
    
//     return 0;
    
// }

int main()
{
    SinglyLinkedList* llist = new SinglyLinkedList();

    int llist_count;
    cin >> llist_count;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    for (int i = 0; i < llist_count; i++) {
        int llist_item;
        cin >> llist_item;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        llist->insert_node(llist_item);
    }

    printLinkedList(llist->head);

    return 0;
}
